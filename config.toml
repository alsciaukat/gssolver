#############################################################################
# Default values are used if any of the following is not specified.         #
# Look at the function `initialize` in `solver.cpp` for the default values. #
#############################################################################

# "solovev" for grid refinement test,
# "polynomial" for Picard iteration convergence test,
# anything else works fine.
select = "default"

[grid]

# currently have no effect
type = "solovev"

# The number of points in the r direction
N = 300


[output]

# The default format is chosen automatically
# depending on the availability of libraries.
# "netCDF" and "csv" are supported. (case insensitive)
# format = "netCDF"

name = "hmode_output.nc"
verbose = false
print_psi = false
print_every = 10

N_gr = 17
logh_low = -2.4
delta_logh = 0.1

[solver] 

# relative error for the fixed-point iteration
# maximum 1e-14, usual 1e-8
e_fix = 1e-5

# relative error for Succesive Over Relaxation
# it suddenly takes very long if e_sor < 1e-14
# it turns out low e_sor converges faster overall!
# although it takes more iteration if it is too low.
e_sor = 1e-4

# relaxation coefficient. Diverges if â‰¥ 2.
# fast but imprecise if close to 2, slow but precise close to 1
omega = 0.9

# relative error for the minimum at the normalization step
e_min = 1e-5

# Rough Guesses.
#
# These does not affect the final outcome.
# If you have rough idea about these quantities,
# it helps the convergence to happen more quickly.
# 
# I_p = 500e3 in KSTAR
I_p = 3000
sigma0 = 900
psi_bdry = 1

# fixed psi at the boundary
psi_l = 1

normalize = false

[initial_condition]

# Choose p(psi) and f(psi)
# "solovev", "polynomial", "HMode", "diamagnetic" are supported.
type = "hmode"


#### polynomial ####
# beta0 = 0.5
# m = 2
# n = 2


#### hmode ####
## p(psi_N) = p0 ( 1 - psi_N^m )^n + pedestal(psi_N)
##
##                   / p_a,        if psi_N < psi_start,
## pedestal(psi_N) = | 0,         if psi_N > psi_end,
##                   \ p_a ( 1 - [(psi_N - psi_start)/(psi_end - psi_start)]^p )^q, otherwise.

p0 = 100
m = 3
n = 7

p_a = 20
psi_start = 0.5
psi_end = 0.7
p = 2
q = 2

## f(psi_N) = B0 R + f_a ( 1 - psi_N^r )^s
B0 = 3.5
f_a = 1e-4
r = 1
s = 2


#### diamagnetic ####
## p(psi_N) = p0 ( 1 - psi_N^m )^n

# p0 = 100
# m = 1
# n = 2

## f(psi_N) = B0 R + f_b ( psi_N^p - psi_start^p )^q ( psi_end^p - psi_N^p )^q /
##                       (
##                         (((psi_start + psi_end)/2)^p - psi_start^p)^q *
##                         (psi_end^p - ((psi_start + psi_end)/2)^p )^q
##                       )
##            + f_a ( 1 - psi_N^r )^s
## if f_b > 0 the plasma is paramagnetic, otherwise it is diamagnetic.

## high perturbation in B_phi exacerbates the convergence.
# B0 = 1e-3
# f_a = 1e-4
# f_b = -2e-4
# psi_start = 0.3
# psi_end = 0.8
# p = 1
# q = 3
# r = 5
# s = 2



